"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = require("react");

var _reactDom = require("react-dom");

// React hooks
var useInViewport = function useInViewport(target, options, config, props) {
  if (config === void 0) {
    config = {
      disconnectOnLeave: false
    };
  }

  var {
    onEnterViewport,
    onLeaveViewport
  } = props;
  var [, forceUpdate] = (0, _react.useState)();
  var observer = (0, _react.useRef)();
  var inViewportRef = (0, _react.useRef)(false);
  var intersected = (0, _react.useRef)(false);
  var enterCountRef = (0, _react.useRef)(0);
  var leaveCountRef = (0, _react.useRef)(0);

  function startObserver() {
    if (target.current && observer.current) {
      var node = (0, _reactDom.findDOMNode)(target.current);

      if (node) {
        observer.current.observe(node);
      }
    }
  }

  function stopObserver() {
    if (target.current && observer.current) {
      var node = (0, _reactDom.findDOMNode)(target.current);

      if (node) {
        observer.current.unobserve(node);
        observer.current.disconnect();
        observer.current = null;
      }
    }
  }

  function handleIntersection(entries) {
    var entry = entries[0] || {};
    var {
      isIntersecting,
      intersectionRatio
    } = entry;
    var isInViewport = typeof isIntersecting !== 'undefined' ? isIntersecting : intersectionRatio > 0; // enter

    if (!intersected.current && isInViewport) {
      intersected.current = true;
      onEnterViewport && onEnterViewport();
      enterCountRef.current += 1;
      inViewportRef.current = isInViewport;
      forceUpdate(isInViewport);
      return;
    } // leave


    if (intersected.current && !isInViewport) {
      intersected.current = false;
      onLeaveViewport && onLeaveViewport();

      if (config.disconnectOnLeave && observer.current) {
        // disconnect obsever on leave
        observer.current.disconnect();
      }

      leaveCountRef.current += 1;
      inViewportRef.current = isInViewport;
      forceUpdate(isInViewport);
    }
  }

  function initIntersectionObserver() {
    if (!observer.current) {
      // $FlowFixMe
      observer.current = new IntersectionObserver(handleIntersection, options);
    }
  }

  (0, _react.useEffect)(() => {
    // https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API
    initIntersectionObserver();
    startObserver();
    return () => {
      stopObserver();
    };
  }, [target, options, config, onEnterViewport, onLeaveViewport]);
  return {
    inViewport: inViewportRef.current,
    enterCount: enterCountRef.current,
    leaveCount: leaveCountRef.current
  };
};

var _default = useInViewport;
exports.default = _default;